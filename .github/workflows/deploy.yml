# 워크플로우의 이름
name: Deploy to AWS EC2

# 실행 조건: 'main' 브랜치에 push 이벤트가 발생했을 때만 실행
on:
  push:
    branches:
      - main

# 실행될 작업(Job) 정의
jobs:
  build-and-deploy:
    # 이 작업이 실행될 가상 환경의 종류
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들
    steps:
      # 1. GitHub 저장소의 코드를 가상 환경으로 내려받음
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정 (프로젝트에 맞는 버전 명시)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. Client 측 의존성 설치 및 프로덕션 빌드
      - name: Install and Build Client
        run: |
          cd Client
          npm ci
          npm run build

      # 4. Server 측 의존성 설치 (배포에 필요한 것만)
      - name: Install Server Dependencies
        run: |
          cd Server
          npm ci --production

      # 5. 빌드된 파일과 서버 코드를 압축하여 전송 준비
      - name: Create deployment package
        run: tar -czvf deployment.tar.gz Client/dist Server

      # 6. 압축 파일을 EC2 서버로 안전하게 전송 (SCP)
      - name: Copy package to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "deployment.tar.gz"
          target: "~/LoaPlan" # EC2 서버에 파일이 저장될 경로

      # 7. EC2 서버에 접속하여 배포 스크립트 실행 (SSH)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: | # EC2 서버에서 순차적으로 실행될 명령어들
            # 1. 프로젝트 폴더로 이동 (이것이 ENOENT 에러를 방지합니다!)
            cd ~/loaplan
            
            # 2. 압축 해제하여 최신 코드로 덮어쓰기
            tar -xzvf deployment.tar.gz
            
            # 3. 서버 폴더로 이동하여 의존성 재설치
            cd Server
            npm install --production
            
            # 4. PM2를 이용하여 서버를 중단 없이 재시작
            pm2 reload loaplan-server
